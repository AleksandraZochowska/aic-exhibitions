{"version":3,"sources":["components/topbar/topbar.tsx","components/table/table.tsx","components/searchbar/searchbar.tsx","components/pagination/pagination.tsx","App.tsx","index.tsx"],"names":["Topbar","className","href","rel","Description","content","trIndex","useState","isExpanded","setIsExpanded","toggleIsExpanded","e","currentTarget","classList","toggle","onClick","slice","Table","tableHeadings","tableData","onHeadingClick","headings","map","col","index","id","data","exhibitionData","title","description","gallery_title","is_featured","type","status","cells","Searchbar","onSearch","searchValue","setSearchValue","placeholder","value","onChange","target","onKeyDown","key","handleEnterPress","Pagination","currentPage","lastPage","onPageChange","screenWidth","setScreenWidth","useEffect","handleWindowResize","window","innerWidth","addEventListener","removeEventListener","populateArr","start","stop","arr","i","push","x","concat","getValues","val","apiUrl","App","loading","setLoading","error","setError","shownExhibitionsList","setShownExhibitionsList","currentPageNumber","setCurrentPageNumber","lastPageNumber","setLastPageNumber","currentSearchQuery","setCurrentSearchQuery","orderAsc","setOrderAsc","currentSort","setCurrentSort","fetchData","pageNumber","searchQuery","sort","throttle","requestParams","a","undefined","requestURL","axios","get","params","q","page","limit","fields","response","pagination","total_pages","handlePageChange","matchMedia","matches","query","sortBy","trim","suffix","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af200608.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./topbar.scss\";\r\n\r\nconst Topbar: React.FC = () => {\r\n  return (\r\n    <div className=\"topbar\">\r\n      <a className=\"topbar__link\" href=\"/aic-exhibitions/\" rel=\"noopener noreferrer\">\r\n        <h1 className=\"topbar__link-text\">The Art Institute of Chicago - Exhibitions</h1>\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Topbar;\r\n","import { useState } from \"react\";\r\nimport { ExhibitionList } from \"../../App\";\r\nimport \"./table.scss\";\r\n\r\n// Component returning exhibition Description cells to populate table body\r\nconst Description: React.FC<{ content: string; trIndex: number }> = ({ content, trIndex }) => {\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n\r\n  // helper function to toggle length of exhibition description (expanded vs. collapsed)\r\n  const toggleIsExpanded: (e: React.MouseEvent) => void = (e) => {\r\n    setIsExpanded(!isExpanded);\r\n    e.currentTarget.classList.toggle(\"row__td-description--expanded\");\r\n  };\r\n\r\n  return (\r\n    <td key={`tr${trIndex}description`} data-column={\"Description\"} className=\"row__td-description\" onClick={(e) => toggleIsExpanded(e)}>\r\n      {isExpanded ? content : content.slice(0, 200) + \"...\"}\r\n      <span onClick={(e) => toggleIsExpanded(e)} className=\"expand-button\">\r\n        {isExpanded ? \" SHOW LESS\" : \" ...READ MORE\"}\r\n      </span>\r\n    </td>\r\n  );\r\n};\r\n\r\n// Component returning Table with chosen data received from API\r\nconst Table: React.FC<{\r\n  tableData: ExhibitionList;\r\n  tableHeadings: string[];\r\n  onHeadingClick: (e: React.MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void;\r\n}> = ({ tableHeadings, tableData, onHeadingClick }) => {\r\n  // Head row of the table (column headings):\r\n  const headings = (\r\n    <tr>\r\n      {tableHeadings.map((col, index) => (\r\n        <th\r\n          key={index}\r\n          id={\r\n            col === \"Title\"\r\n              ? \"title\"\r\n              : col === \"Description\"\r\n              ? \"description\"\r\n              : col === \"Gallery\"\r\n              ? \"gallery_title\"\r\n              : col === \"Featured\"\r\n              ? \"is_featured\"\r\n              : col === \"Type of Exhibition\"\r\n              ? \"type\"\r\n              : \"unknown_heading\"\r\n          }\r\n          // on click sort the table\r\n          onClick={(e) => onHeadingClick(e)}\r\n        >\r\n          <h2>{col}</h2>\r\n        </th>\r\n      ))}\r\n    </tr>\r\n  );\r\n\r\n  // Data to populate table body:\r\n  const data = tableData.map((exhibitionData, trIndex) => {\r\n    const { title, description, gallery_title, is_featured, type, status } = exhibitionData;\r\n\r\n    // Cells to populate a single row:\r\n    const cells = (\r\n      <>\r\n        <td key={`tr${trIndex}title`} data-column={\"Title\"}>\r\n          {title ? title : \"—\"}\r\n        </td>\r\n        {description ? (\r\n          <Description content={description} trIndex={trIndex} />\r\n        ) : (\r\n          <td key={`tr${trIndex}description`} data-column={\"Description\"} className=\"row__td-description\">\r\n            —\r\n          </td>\r\n        )}\r\n        <td key={`tr${trIndex}gallerytitle`} data-column={\"Gallery\"}>\r\n          {gallery_title ? gallery_title : \"—\"}\r\n        </td>\r\n        <td key={`tr${trIndex}isfeatured`} data-column={\"Featured\"}>\r\n          {is_featured ? \"Yes\" : \"No\"}\r\n          <br />\r\n          <br />\r\n          {status === \"Confirmed\" ? \"(Exh. OPEN)\" : status === \"Closed\" ? \"(Exh. CLOSED)\" : null}\r\n        </td>\r\n        <td key={`tr${trIndex}type`} data-column={\"Type of Exhibition\"}>\r\n          {type ? type : \"—\"}\r\n        </td>\r\n      </>\r\n    );\r\n\r\n    // Rows (with adequate class names, depending on whether the exhibition is closed or open) to populate the table:\r\n    return status === \"Closed\" ? (\r\n      <tr key={`tr${trIndex}`} className=\"table-body__row table-body__row--closed\">\r\n        {cells}\r\n      </tr>\r\n    ) : status === \"Confirmed\" ? (\r\n      <tr key={`tr${trIndex}`} className=\"table-body__row table-body__row--open\">\r\n        {cells}\r\n      </tr>\r\n    ) : (\r\n      <tr key={`tr${trIndex}`} className=\"table-body__row\">\r\n        {cells}\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  // Return table:\r\n  return (\r\n    <div className=\"table-container\">\r\n      <table className=\"table-container__table\">\r\n        <thead className=\"table__head\">{headings}</thead>\r\n        <tbody className=\"table__body\">{data}</tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React, { useState } from \"react\";\r\nimport \"./searchbar.scss\";\r\n\r\nconst Searchbar: React.FC<{\r\n  onSearch: (query: string) => void;\r\n}> = ({ onSearch }) => {\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n\r\n  // Search for the given query when user hits Enter...\r\n  const handleEnterPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === \"Enter\" && searchValue !== \"\") onSearch(searchValue);\r\n  };\r\n  // ...or clicks on the search icon\r\n  const handleSearchIconClick = () => {\r\n    if (searchValue !== \"\") onSearch(searchValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"searchbar\">\r\n      <ul>\r\n        <li>\r\n          <input\r\n            className=\"searchbar__input\"\r\n            placeholder=\"Search...\"\r\n            type=\"text\"\r\n            value={searchValue}\r\n            onChange={(e) => {\r\n              setSearchValue(e.target.value);\r\n            }}\r\n            onKeyDown={(e) => {\r\n              handleEnterPress(e);\r\n            }}\r\n          />\r\n        </li>\r\n        <li>\r\n          <i\r\n            className=\"fas fa-search searchbar__icon\"\r\n            onClick={() => {\r\n              handleSearchIconClick();\r\n            }}\r\n          ></i>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Searchbar;\r\n","import React, { MouseEvent, useEffect, useState } from \"react\";\r\nimport \"./pagination.scss\";\r\n\r\nconst Pagination: React.FC<{\r\n  currentPage: number;\r\n  lastPage: number;\r\n  onPageChange: (e: MouseEvent, val: string | number) => void;\r\n}> = ({ currentPage, lastPage, onPageChange }) => {\r\n  const [screenWidth, setScreenWidth] = useState(0);\r\n\r\n  // On Pagination mount: get the current window width, set event listener;\r\n  // On unmount: remove event listener\r\n  useEffect(() => {\r\n    const handleWindowResize = () => {\r\n      setScreenWidth(window.innerWidth);\r\n    };\r\n    handleWindowResize();\r\n    window.addEventListener(\"resize\", handleWindowResize);\r\n    return () => window.removeEventListener(\"resize\", handleWindowResize);\r\n  }, []);\r\n\r\n  // Helper function pushing numbers & arrows into the array:\r\n  const populateArr: (start: number, stop: number) => (string | number)[] = (start, stop) => {\r\n    const arr = [];\r\n    for (let i = start; i <= stop; i++) {\r\n      arr.push(i);\r\n    }\r\n    return arr as (string | number)[];\r\n  };\r\n\r\n  // Function deciding, what building blocks the pagination will consist of:\r\n  const getValues: () => (string | number)[] = () => {\r\n    let x = 2;\r\n\r\n    // For bigger screens - show extended pagination controls:\r\n    if (screenWidth > 791) {\r\n      // If there are 9 or less pages - show no arrows:\r\n      if (lastPage <= 9) {\r\n        return populateArr(1, lastPage) as (string | number)[];\r\n      }\r\n\r\n      // Else, if there are more than 9 pages...\r\n      switch (currentPage) {\r\n        case 1:\r\n        case lastPage:\r\n          x = 6;\r\n          break;\r\n        case 2:\r\n        case lastPage - 1:\r\n          x = 5;\r\n          break;\r\n        case 3:\r\n        case lastPage - 2:\r\n          x = 4;\r\n          break;\r\n        case 4:\r\n        case lastPage - 3:\r\n          x = 3;\r\n          break;\r\n        default:\r\n          x = 2;\r\n      }\r\n\r\n      // ... show only right arrow if the left one is not needed\r\n      if (currentPage <= 4) {\r\n        return populateArr(1, currentPage + x).concat([\"🠖\", lastPage]) as (string | number)[];\r\n      }\r\n\r\n      // ... show only left arrow if the right one is not needed\r\n      if (currentPage >= lastPage - 3) {\r\n        return [1, \"🠔\"].concat(populateArr(currentPage - x, lastPage)) as (string | number)[];\r\n      }\r\n\r\n      // ... show both arrows if current page is between 5 & (last page - 4)\r\n      return [1, \"🠔\"].concat(populateArr(currentPage - 2, currentPage + 2)).concat([\"🠖\", lastPage]) as (string | number)[];\r\n    }\r\n\r\n    // For smaller screens - show reduced pagination controls:\r\n    x = 1;\r\n    if (currentPage === 1) {\r\n      return [currentPage, \"🠖\", lastPage] as (string | number)[];\r\n    }\r\n    if (currentPage === lastPage) {\r\n      return [1, \"🠔\", lastPage] as (string | number)[];\r\n    }\r\n    return [1, \"🠔\", currentPage, \"🠖\", lastPage] as (string | number)[];\r\n  };\r\n\r\n  // if there is only 1 page of results, do NOT show pagination controls\r\n  if (lastPage <= 1) return null;\r\n\r\n  // Return the pagination component:\r\n  return (\r\n    <nav>\r\n      <div className=\"pagination-container\">\r\n        <ul className=\"pagination-list\">\r\n          {getValues().map((val, index) => (\r\n            <li\r\n              key={index}\r\n              className={\r\n                val === \"🠔\"\r\n                  ? \"pagination-list__item pagination-list__arrow--back\"\r\n                  : val === \"🠖\"\r\n                  ? \"pagination-list__item pagination-list__arrow--forward\"\r\n                  : val === currentPage\r\n                  ? \"pagination-list__item--active pagination-list__number\"\r\n                  : \"pagination-list__item pagination-list__number\"\r\n              }\r\n              onClick={(e) => {\r\n                onPageChange(e, val);\r\n              }}\r\n            >\r\n              {val}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import \"./App.scss\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport throttle from \"lodash/throttle\";\r\nimport Topbar from \"./components/topbar/topbar\";\r\nimport Table from \"./components/table/table\";\r\nimport Searchbar from \"./components/searchbar/searchbar\";\r\nimport Pagination from \"./components/pagination/pagination\";\r\n\r\nconst apiUrl = \"https://api.artic.edu/api/v1/exhibitions\";\r\n\r\ninterface Exhibition {\r\n  title: string | null;\r\n  is_featured: boolean;\r\n  description: string | null;\r\n  gallery_title: string | null;\r\n  type: string | null;\r\n  status: string;\r\n}\r\n\r\nexport type ExhibitionList = Exhibition[];\r\n\r\nfunction App() {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [shownExhibitionsList, setShownExhibitionsList] = useState<ExhibitionList>([]);\r\n  const [currentPageNumber, setCurrentPageNumber] = useState(1);\r\n  const [lastPageNumber, setLastPageNumber] = useState(1);\r\n  const [currentSearchQuery, setCurrentSearchQuery] = useState(\"\");\r\n  const [orderAsc, setOrderAsc] = useState(true);\r\n  const [currentSort, setCurrentSort] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n  }, []);\r\n\r\n  // Hook fetching data on every currentPageNumber change\r\n  useEffect(() => {\r\n    fetchData({ pageNumber: currentPageNumber, searchQuery: currentSearchQuery, sort: currentSort });\r\n  }, [currentPageNumber]);\r\n\r\n  // Function sending GET request to AIC API\r\n  const fetchData = throttle(async (requestParams: { pageNumber?: number; searchQuery?: string; sort?: string }) => {\r\n    let { pageNumber, searchQuery, sort } = requestParams;\r\n    // Set page number to passed number - or to correct one if number outside of range was passed\r\n    pageNumber = pageNumber === undefined || pageNumber < 1 ? 1 : pageNumber > lastPageNumber ? lastPageNumber : pageNumber;\r\n    // Set correct request URL\r\n    searchQuery = searchQuery === undefined ? \"\" : searchQuery;\r\n    sort = sort === undefined ? \"\" : sort;\r\n    const requestURL = sort || searchQuery ? `${apiUrl}/search?${sort}` : `${apiUrl}${sort}`;\r\n\r\n    // Set flags\r\n    setError(false);\r\n    setLoading(true);\r\n\r\n    try {\r\n      // Send request\r\n      const response = await axios.get(requestURL, {\r\n        params: {\r\n          q: searchQuery,\r\n          page: pageNumber,\r\n          limit: 30,\r\n          fields: \"title,is_featured,description,gallery_title,type,status\",\r\n        },\r\n      });\r\n\r\n      // Turn off loading; Keep response data & number of pages in an array for furhter use\r\n      setLoading(false);\r\n      setShownExhibitionsList(response.data.data);\r\n      setLastPageNumber(response.data.pagination.total_pages);\r\n    } catch (err) {\r\n      // Turn off loading, turn on error\r\n      setLoading(false);\r\n      setError(true);\r\n    }\r\n  }, 60000);\r\n\r\n  // Function handling searching for exhibitions, passed as callback to Searchbar component\r\n  const handleSearch: (query: string) => void = (query) => {\r\n    // Disallow searching for new query while the request is still pending\r\n    if (loading) return;\r\n    setCurrentSearchQuery(query);\r\n    setOrderAsc(true);\r\n    if (currentPageNumber === 1) fetchData({ searchQuery: query });\r\n    else setCurrentPageNumber(1);\r\n  };\r\n\r\n  // Function handling sorting of columns, passed as callback to Table component\r\n  // ~ TODO: add sorting for description & gallery_title ~\r\n  const handleSort: (e: React.MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void = (e) => {\r\n    // Disallow sorting if an error occured or the request is still pending\r\n    if (error || loading) return;\r\n\r\n    let sortBy = e.currentTarget.id.trim();\r\n    sortBy = sortBy === \"description\" ? \"title\" : sortBy === \"gallery_title\" ? \"type\" : sortBy;\r\n    const suffix = sortBy === \"title\" ? \".keyword\" : sortBy === \"description\" ? \".text\" : \"\";\r\n\r\n    // Sort descending\r\n    if (orderAsc) {\r\n      setOrderAsc(false);\r\n      setCurrentSort(`sort[${sortBy}${suffix}][order]=desc`);\r\n      if (currentPageNumber === 1) fetchData({ searchQuery: currentSearchQuery, sort: `sort[${sortBy}${suffix}][order]=desc` });\r\n      else setCurrentPageNumber(1);\r\n    }\r\n    // Sort ascending\r\n    if (!orderAsc) {\r\n      setOrderAsc(true);\r\n      setCurrentSort(`sort[${sortBy}${suffix}][order]=asc`);\r\n      if (currentPageNumber === 1) fetchData({ searchQuery: currentSearchQuery, sort: `sort[${sortBy}${suffix}][order]=asc` });\r\n      else setCurrentPageNumber(1);\r\n    }\r\n  };\r\n\r\n  // Function handling the page change, passed as callback to Pagination component\r\n  // ~ TODO: error-proof choosing high page number when search(/sort) is on ~\r\n  const handlePageChange: (e: React.MouseEvent, val: string | number) => void = (e, val) => {\r\n    // Disallow changing page while the request is pending\r\n    if (loading) return;\r\n\r\n    // If user clicks on a number, go to chosen page\r\n    if (typeof val === \"number\") {\r\n      setCurrentPageNumber(val);\r\n    }\r\n\r\n    // If user clicks on an arrow...\r\n    if (typeof val === \"string\") {\r\n      let x = 1;\r\n\r\n      // For smaller screens arrow will push 1 page forward/back\r\n      if (window.matchMedia(\"(max-width: 791px)\").matches) {\r\n        x = 1;\r\n      }\r\n      // For bigger screens arrow will push adequately more pages forward/back (to keep number of items equal to 9)\r\n      if (!window.matchMedia(\"(max-width: 791px)\").matches) {\r\n        switch (currentPageNumber) {\r\n          case 1:\r\n          case lastPageNumber:\r\n            x = 6;\r\n            break;\r\n          case 2:\r\n          case lastPageNumber - 1:\r\n            x = 5;\r\n            break;\r\n          case 3:\r\n          case lastPageNumber - 2:\r\n            x = 4;\r\n            break;\r\n          case 4:\r\n          case lastPageNumber - 3:\r\n            x = 3;\r\n            break;\r\n          default:\r\n            x = 2;\r\n        }\r\n      }\r\n      // Backward arrow pushes backwards\r\n      if (val === \"🠔\") {\r\n        setCurrentPageNumber(currentPageNumber - x);\r\n      }\r\n      // Forward arrow pushes forwards\r\n      if (val === \"🠖\") {\r\n        setCurrentPageNumber(currentPageNumber + x);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Return main (and for now only) view of the app:\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Topbar />\r\n      </header>\r\n      <main>\r\n        <Searchbar onSearch={handleSearch} />\r\n        {error ? null : <Pagination currentPage={currentPageNumber} lastPage={lastPageNumber} onPageChange={handlePageChange} />}\r\n        {error ? (\r\n          <div className=\"message\">We're sorry, we cannot show you any exhibitions - try again!</div>\r\n        ) : loading ? (\r\n          <div className=\"loading-message\">LOADING...</div>\r\n        ) : lastPageNumber ? (\r\n          <Table\r\n            tableData={shownExhibitionsList}\r\n            tableHeadings={[\"Title\", \"Description\", \"Gallery\", \"Featured\", \"Type of Exhibition\"]}\r\n            onHeadingClick={handleSort}\r\n          />\r\n        ) : (\r\n          <div className=\"message\">No exhibitions match your search.</div>\r\n        )}\r\n        {loading || error ? null : <Pagination currentPage={currentPageNumber} lastPage={lastPageNumber} onPageChange={handlePageChange} />}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./scss/styles.scss\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}